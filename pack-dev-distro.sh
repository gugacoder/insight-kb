#!/bin/bash

# NIC Insight - Production Distribution Packing Script
# Gera distribui√ß√£o completa para deploy em produ√ß√£o

set -e  # Exit on any error

echo "üöÄ NIC Insight - Empacotamento para Produ√ß√£o"
echo "============================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Vari√°veis
DIST_DIR="./dist"
IMAGE_NAME="nic-insight"
IMAGE_TAG="latest"
TAR_FILE="nic-insight.tar"

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Validar se estamos no diret√≥rio correto
if [ ! -f "package.json" ] || [ ! -f ".env" ] || [ ! -f "librechat.yaml" ]; then
    log_error "Execute este script no diret√≥rio raiz do projeto NIC Insight"
    exit 1
fi

# Criar/limpar diret√≥rio dist
log_info "Preparando diret√≥rio de distribui√ß√£o..."
rm -rf "$DIST_DIR"
mkdir -p "$DIST_DIR"

# Copiar Dockerfile de produ√ß√£o
log_info "Copiando Dockerfile de produ√ß√£o..."
cp Dockerfile.prod "$DIST_DIR/"
log_success "Dockerfile.prod copiado"

# Copiar arquivos de configura√ß√£o
log_info "Copiando arquivos de configura√ß√£o..."
cp .env "$DIST_DIR/"
cp librechat.yaml "$DIST_DIR/"
log_success "Arquivos de configura√ß√£o copiados"

# Copiar package.json para refer√™ncia
log_info "Copiando package.json..."
cp package.json "$DIST_DIR/"
log_success "package.json copiado"

# Copiar docker-compose de produ√ß√£o
log_info "Copiando docker-compose de produ√ß√£o..."
cp docker-compose.prod.yml "$DIST_DIR/docker-compose.yml"
log_success "docker-compose.yml copiado"

# Criar README de deploy
log_info "Criando documenta√ß√£o de deploy..."
cat > "$DIST_DIR/README-DEPLOY.md" << 'EOF'
# NIC Insight - Deploy de Produ√ß√£o

## Arquivos Inclu√≠dos

- `nic-insight.tar` - Imagem Docker completa com aplica√ß√£o e configura√ß√µes
- `docker-compose.yml` - Configura√ß√£o para Traefik e depend√™ncias
- `deploy.sh` - Script automatizado de deploy

## Pr√©-requisitos no Servidor

1. Docker e Docker Compose instalados
2. Rede `codr-net` criada
3. Traefik configurado e rodando

## Deploy

```bash
# 1. Carregar a imagem
docker load -i nic-insight.tar

# 2. Criar diret√≥rios necess√°rios
mkdir -p data logs

# 3. Subir os servi√ßos
docker compose up -d
```

## Verifica√ß√£o

```bash
# Status dos containers
docker compose ps

# Logs da aplica√ß√£o
docker compose logs nic

# Logs do MongoDB
docker compose logs mongo
```

## URLs

- Aplica√ß√£o: https://nic.codrstudio.dev
- Porta interna: 5678

## Persist√™ncia

- `./data` - Uploads e arquivos da aplica√ß√£o
- `./logs` - Logs da aplica√ß√£o
- `mongodb_data` - Volume do MongoDB
- `redis_data` - Volume do Redis
EOF

# Criar script de deploy automatizado
log_info "Criando script de deploy..."
cat > "$DIST_DIR/deploy.sh" << 'EOF'
#!/bin/bash

# Script de Deploy Automatizado - NIC Insight
set -e

echo "üöÄ Deploy NIC Insight - Produ√ß√£o"
echo "================================"

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando"
    exit 1
fi

# Verificar se a rede existe
if ! docker network inspect codr-net > /dev/null 2>&1; then
    echo "‚ö†Ô∏è  Rede 'codr-net' n√£o encontrada. Criando..."
    docker network create codr-net
fi

# Carregar imagem
echo "üì¶ Carregando imagem Docker..."
docker load -i nic-insight.tar

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios..."
mkdir -p data logs

# Parar servi√ßos existentes (se houver)
echo "üõë Parando servi√ßos existentes..."
docker compose down 2>/dev/null || true

# Subir servi√ßos
echo "üöÄ Iniciando servi√ßos..."
docker compose up -d

# Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o..."
sleep 10

# Verificar status
echo "üîç Verificando status dos servi√ßos..."
docker compose ps

echo ""
echo "‚úÖ Deploy conclu√≠do!"
echo "üåê Aplica√ß√£o dispon√≠vel em: https://nic.codrstudio.dev"
echo "üìã Logs: docker compose logs nic"
EOF

chmod +x "$DIST_DIR/deploy.sh"
log_success "Script de deploy criado: $DIST_DIR/deploy.sh"

# Criar script de build Docker
log_info "Criando script de build Docker..."
cat > "$DIST_DIR/build.sh" << 'EOF'
#!/bin/bash

# Script de Build - NIC Insight
set -e

echo "üî® Build NIC Insight - Imagem Docker"
echo "===================================="

IMAGE_NAME="nic-insight"
IMAGE_TAG="latest"

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando"
    exit 1
fi

# Build da imagem
echo "üì¶ Construindo imagem Docker..."
docker build -f Dockerfile.prod -t "$IMAGE_NAME:$IMAGE_TAG" .

# Salvar imagem
echo "üíæ Salvando imagem..."
docker save -o nic-insight.tar "$IMAGE_NAME:$IMAGE_TAG"

echo "‚úÖ Build conclu√≠do!"
echo "üìÅ Imagem salva em: nic-insight.tar"
echo "üìã Tamanho: $(du -h nic-insight.tar | cut -f1)"
EOF

chmod +x "$DIST_DIR/build.sh"
log_success "Script de build criado: $DIST_DIR/build.sh"

# Criar arquivo de informa√ß√µes da build
log_info "Gerando informa√ß√µes da build..."
cat > "$DIST_DIR/build-info.txt" << EOF
NIC Insight - Informa√ß√µes da Build
==================================

Data/Hora: $(date)
Usu√°rio: $(whoami)
Hostname: $(hostname)
Git Commit: $(git rev-parse HEAD 2>/dev/null || echo "N/A")
Git Branch: $(git branch --show-current 2>/dev/null || echo "N/A")

Arquivos Inclu√≠dos:
- Dockerfile.prod: Dockerfile de produ√ß√£o
- docker-compose.yml: Configura√ß√£o para Traefik
- .env: Vari√°veis de ambiente
- librechat.yaml: Configura√ß√£o da aplica√ß√£o
- package.json: Depend√™ncias do projeto
- build.sh: Script para build da imagem Docker
- deploy.sh: Script de deploy automatizado

Configura√ß√µes:
- .env: $(wc -l < .env) linhas
- librechat.yaml: $(wc -l < librechat.yaml) linhas

Depend√™ncias:
- MongoDB 7
- Redis 7-alpine
- Node.js 20-alpine
EOF

log_success "Informa√ß√µes da build salvas: $DIST_DIR/build-info.txt"

# Criar arquivo tar.gz da distribui√ß√£o
log_info "Criando arquivo tar.gz da distribui√ß√£o..."
DIST_ARCHIVE="nic-insight-dist-$(date +%Y%m%d-%H%M%S).tar.gz"
tar -czf "$DIST_ARCHIVE" -C dist .
log_success "Arquivo compactado criado: $DIST_ARCHIVE"

# Mostrar tamanho do arquivo
ARCHIVE_SIZE=$(du -h "$DIST_ARCHIVE" | cut -f1)
echo "  üì¶ Tamanho: $ARCHIVE_SIZE"

# Resumo final
echo ""
echo "üìã RESUMO DA DISTRIBUI√á√ÉO"
echo "========================"
echo "üìÅ Diret√≥rio: $DIST_DIR"
echo "üì¶ Arquivos na pasta dist:"
ls -la "$DIST_DIR"

echo ""
echo "üì¶ Arquivo compactado: $DIST_ARCHIVE ($ARCHIVE_SIZE)"

echo ""
echo "üéØ PR√ìXIMOS PASSOS:"
echo "1. Transferir arquivo '$DIST_ARCHIVE' para o servidor"
echo "2. No servidor: tar -xzf $DIST_ARCHIVE"
echo "3. Executar: ./build.sh (para criar imagem Docker)"
echo "4. Executar: ./deploy.sh (para fazer deploy)"
echo "5. Verificar em: https://nic.codrstudio.dev"

log_success "Empacotamento conclu√≠do com sucesso!"